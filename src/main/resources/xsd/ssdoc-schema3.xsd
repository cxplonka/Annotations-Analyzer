<?xml version="1.0" encoding="utf-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="https://www.scansoft.com/omnipage/xml/ssdoc-schema3.xsd"
           targetNamespace="https://www.scansoft.com/omnipage/xml/ssdoc-schema3.xsd"
           elementFormDefault="qualified">
	<!--										-->
	<!--										-->
	<!--										-->
	<!--										-->
	<!--										-->
	<!--										-->
	<!-- The common basic types:				-->
	<!--										-->
	
	<!-- This describe any color. It can be 3 byte in hexadecimal what means the RGB values or it is the default background or default foreground-->
	<xs:simpleType name="colorType">
		<xs:restriction base="xs:string">
		  <xs:pattern value="[a-zA-Z0-9]{6}" />
		  <xs:pattern value="defaultBackground" />
		  <xs:pattern value="defaultForeground" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The distance between two point in twips -->
	<xs:simpleType name="distanceType">
		<xs:restriction base="xs:integer">
		</xs:restriction>
	</xs:simpleType>
	<!-- This type represents one character -->
	<xs:simpleType name="characterType">
		<xs:restriction base="xs:string">
		    <xs:length value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<!-- Standard page sizes -->
	<xs:simpleType name="pageSizeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="A0" />
			<xs:enumeration value="A1" />
			<xs:enumeration value="A2" />
			<xs:enumeration value="A3" />
			<xs:enumeration value="A4" />
			<xs:enumeration value="A5" />
			<xs:enumeration value="A6" />
			<xs:enumeration value="A7" />
			<xs:enumeration value="A8" />

			<xs:enumeration value="B0" />
			<xs:enumeration value="B1" />
			<xs:enumeration value="B2" />
			<xs:enumeration value="B3" />
			<xs:enumeration value="B4" />
			<xs:enumeration value="B5" />
			<xs:enumeration value="B6" />
			<xs:enumeration value="B7" />
			<xs:enumeration value="B8" />

			<xs:enumeration value="C0" />
			<xs:enumeration value="C1" />
			<xs:enumeration value="C2" />
			<xs:enumeration value="C3" />
			<xs:enumeration value="C4" />
			<xs:enumeration value="C5" />
			<xs:enumeration value="C6" />
			<xs:enumeration value="C7" />
			<xs:enumeration value="C8" />

			<xs:enumeration value="B0 (JIS)" />
			<xs:enumeration value="B1 (JIS)" />
			<xs:enumeration value="B2 (JIS)" />
			<xs:enumeration value="B3 (JIS)" />
			<xs:enumeration value="B4 (JIS)" />
			<xs:enumeration value="B5 (JIS)" />
			<xs:enumeration value="B6 (JIS)" />
			<xs:enumeration value="B7 (JIS)" />
			<xs:enumeration value="B8 (JIS)" />

			<xs:enumeration value="Letter" />
			<xs:enumeration value="Letter Extra" />

			<xs:enumeration value="9x11" />
			<xs:enumeration value="10x11" />
			<xs:enumeration value="10x14" />
			<xs:enumeration value="11x17" />
			<xs:enumeration value="12x11" />
			<xs:enumeration value="15x11" />
			<xs:enumeration value="A3 Extra" />
			<xs:enumeration value="A4 Extra" />
			<xs:enumeration value="A4 Plus" />
			<xs:enumeration value="A5 Extra" />
			<xs:enumeration value="B5 (ISO) Extra" />
			<xs:enumeration value="C size sheet" />
			<xs:enumeration value="D size sheet" />
			<xs:enumeration value="E size sheet" />
			<xs:enumeration value="Envelope #9" />
			<xs:enumeration value="Envelope #10" />
			<xs:enumeration value="Envelope #11" />
			<xs:enumeration value="Envelope #12" />
			<xs:enumeration value="Envelope #14" />
			<xs:enumeration value="Envelope B4" />
			<xs:enumeration value="Envelope B5" />
			<xs:enumeration value="Envelope B6" />
			<xs:enumeration value="Envelope C3" />
			<xs:enumeration value="Envelope C4" />
			<xs:enumeration value="Envelope C5" />
			<xs:enumeration value="Envelope C6" />
			<xs:enumeration value="Envelope C65" />
			<xs:enumeration value="Envelope DL" />
			<xs:enumeration value="Envelope Invite" />
			<xs:enumeration value="Envelope Monarch" />
			<xs:enumeration value="Envelope Personal" />
			<xs:enumeration value="Executive" />
			<xs:enumeration value="Folio" />
			<xs:enumeration value="German Std Fanfold" />
			<xs:enumeration value="German Legal Fanfold" />
			<xs:enumeration value="Japanese Postcard" />
			<xs:enumeration value="Japanese Double Postcard" />
			<xs:enumeration value="Japanese Envelope Kaku #2" />
			<xs:enumeration value="Japanese Envelope Kaku #3" />
			<xs:enumeration value="Japanese Envelope Chou #3" />
			<xs:enumeration value="Japanese Envelope Chou #4" />
			<xs:enumeration value="Japanese Envelope You #4" />
			<xs:enumeration value="Japanese Envelope You #4 Rotated" />
			<xs:enumeration value="Ledger" />
			<xs:enumeration value="Legal" />
			<xs:enumeration value="Legal Extra" />
			<xs:enumeration value="Letter Plus" />
			<xs:enumeration value="Note" />
			<xs:enumeration value="PRC 16K" />
			<xs:enumeration value="PRC 32K" />
			<xs:enumeration value="PRC Envelope #1" />
			<xs:enumeration value="PRC Envelope #2" />
			<xs:enumeration value="PRC Envelope #3" />
			<xs:enumeration value="PRC Envelope #4" />
			<xs:enumeration value="PRC Envelope #5" />
			<xs:enumeration value="PRC Envelope #6" />
			<xs:enumeration value="PRC Envelope #7" />
			<xs:enumeration value="PRC Envelope #8" />
			<xs:enumeration value="PRC Envelope #9" />
			<xs:enumeration value="PRC Envelope #10" />
			<xs:enumeration value="PRC 16K Rotated" />
			<xs:enumeration value="PRC 32K Rotated" />
			<xs:enumeration value="Quarto" />
			<xs:enumeration value="Statement" />
			<xs:enumeration value="SuperA" />
			<xs:enumeration value="SuperB" />
			<xs:enumeration value="Tabloid" />
			<xs:enumeration value="Tabloid" />
			<xs:enumeration value="US Std Fanfold" />
			
			<xs:enumeration value="Custom" />
		</xs:restriction>
	</xs:simpleType>
	<!-- It describe that the object have to move with the anchor object (toPara) or not (toPage) -->
	<xs:simpleType name="anchorToType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="toPage" />
			<xs:enumeration value="toPara" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The style of line. This line can be Ruler, table grid or piece of border-->
	<!-- line as something straight and narrow and NOT as a line of text -->
	<xs:simpleType name="lineStyle">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="single" />
			<xs:enumeration value="dotted" />
			<xs:enumeration value="thick" />
			<xs:enumeration value="dash" />
			<xs:enumeration value="double" />
		</xs:restriction>
	</xs:simpleType>
	<!-- Orientation of the original image of the page. You need to use it when you want to connect the position to the image -->
	<xs:simpleType name="orientationType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="0" />
			<xs:enumeration value="90" />
			<xs:enumeration value="180" />
			<xs:enumeration value="270" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The paragraph, picture, table and cell have alignment attribute -->
	<xs:simpleType name="alignmentType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="left" />
			<xs:enumeration value="right" />
			<xs:enumeration value="centered" />
			<xs:enumeration value="justified" />  <!-- Don't used in case of tab -->
			<xs:enumeration value="decimal" />  <!-- It can be use only in case of cell -->
		</xs:restriction>
	</xs:simpleType>
	<!-- The vertical alignment of cell -->
	<xs:simpleType name="verticalAlignmentType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="top" />
			<xs:enumeration value="middle" />
			<xs:enumeration value="bottom" />
		</xs:restriction>
	</xs:simpleType>
	<!-- We can handle to different bullet type. The ordered contains numbers or alphabet. The bulleted contains a bullet character. -->
	<xs:simpleType name="bulletTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ordered" />
			<xs:enumeration value="bulleted" />
		</xs:restriction>
	</xs:simpleType>
	<!-- This describe the bullet character in case of bulleted bulletType -->
	<xs:simpleType name="bulletValueType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="smallCircle" />
			<xs:enumeration value="whiteCircle" />
			<xs:enumeration value="smallSquare" />
			<xs:enumeration value="whiteSquare" />
			<xs:enumeration value="squareRoot" />
			<xs:enumeration value="triangular" />
			<xs:enumeration value="dash" />
			<xs:enumeration value="diamond" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The line spacing can be single, double, one and half, exactly or atLeast -->
	<!-- In case of exactly and atLeast we have to specify the value too -->
	<xs:simpleType name="lspValueType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="single" />
			<xs:enumeration value="oneAndHalf" />
			<xs:enumeration value="double" />
			<xs:enumeration value="exactly" />
			<xs:enumeration value="atLeast" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The name of font. e.g. "Arial", "Times New Roman", "Garamond", ... -->
	<xs:simpleType name="fontFaceType">
		<xs:restriction base="xs:string">
		</xs:restriction>
	</xs:simpleType>
	<!-- languages now only include the ones we can spell -->
	<xs:simpleType name="languageType">
		<xs:restriction base="xs:language">
		</xs:restriction>
	</xs:simpleType>
	<!-- The direction of writing -->
	<xs:simpleType name="textDirectionType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="left2right" />  <!-- e.g. The latin writing mode -->
			<xs:enumeration value="top2down" />
			<xs:enumeration value="down2top" />
			<xs:enumeration value="top2downNeon" />
			<xs:enumeration value="right2left" />
		</xs:restriction>
	</xs:simpleType>
	<!-- Specifies whether text is underlined and the underline style. The none means no underlining. -->
	<xs:simpleType name="underlinedType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="single" />
			<xs:enumeration value="double" />
		</xs:restriction>
	</xs:simpleType>
	<!-- Superscript raises the text above the baseline and changes the text to a smaller font size.
         Subscript lowers the text below the baseline and changes the text to a smaller font size.
         none means the normal baseline and normal font size. -->
	<xs:simpleType name="subsuperscriptType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="subscript" />
			<xs:enumeration value="superscript" />
		</xs:restriction>
	</xs:simpleType>
	<!-- This describe the family of the font. You need it if you want to substitute the font. -->
	<xs:simpleType name="fontFamilyType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="roman" />
			<xs:enumeration value="swiss" />
			<xs:enumeration value="modern" />
			<xs:enumeration value="script" />
			<xs:enumeration value="decorative" />
		</xs:restriction>
	</xs:simpleType>
	<!-- This describe the font. You need it if you want to substitute the font. -->
	<xs:simpleType name="fontPitchType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="fixed" />
			<xs:enumeration value="variable" />
		</xs:restriction>
	</xs:simpleType>
	<!-- We can handle two different field code. The pageNumber, what is the number of the actual page and the numberOfPages, what is the number of all pages -->
	<xs:simpleType name="fieldCodeTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="pageNumber" />
			<xs:enumeration value="numberOfPages" />
		</xs:restriction>
	</xs:simpleType>
	<!-- This identify a corner of a rectangle -->
	<xs:simpleType name="cornerId">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="topLeft" />
			<xs:enumeration value="topRight" />
			<xs:enumeration value="bottomLeft" />
			<xs:enumeration value="bottomRight" />
		</xs:restriction>
	</xs:simpleType>
	<!-- The pattern of the background -->
	<xs:simpleType name="patternType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="vertical" />
			<xs:enumeration value="horizontal" />
			<xs:enumeration value="fdiagonal" />
			<xs:enumeration value="bdiagonal" />
			<xs:enumeration value="cross" />
			<xs:enumeration value="diagcross" />
			<xs:enumeration value="5" />
			<xs:enumeration value="10" />
			<xs:enumeration value="20" />
			<xs:enumeration value="25" />
			<xs:enumeration value="30" />
			<xs:enumeration value="40" />
			<xs:enumeration value="50" />
			<xs:enumeration value="60" />
			<xs:enumeration value="70" />
			<xs:enumeration value="75" />
			<xs:enumeration value="80" />
			<xs:enumeration value="90" />
			<xs:enumeration value="gradhorizontal" />
			<xs:enumeration value="gradvertical" />
		</xs:restriction>
	</xs:simpleType>
	<!-- We can mark two different complex input form field. -->
	<xs:simpleType name="formGroupTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="comb" />  <!-- This is a comb, more small rectangle and the user can put only one character to each rectangle. -->
			<xs:enumeration value="multiLine" /> <!-- More line together -->
		</xs:restriction>
	</xs:simpleType>
	<!-- This describe that an object is a continuation of the previos object, that this object continue on the next object or both. -->
	<xs:simpleType name="continuityType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="contToNext" />
			<xs:enumeration value="contFromPrev" />
			<xs:enumeration value="contFromPrevToNext" />
		</xs:restriction>
	</xs:simpleType>
	<!--										-->
	<!-- The common attribute groups:			-->
	<!--										-->
	<!-- The appearance of a line. It can be a pieace of border, a grid of table or a ruler -->
	<xs:attributeGroup name="lineDesc">
		<xs:attribute name="type" type="lineStyle" default="none" />
		<xs:attribute name="width" type="distanceType" default="1" />
		<xs:attribute name="color" type="colorType" default="defaultForeground" />
	</xs:attributeGroup>
	<!-- rectangle description	-->
	<xs:attributeGroup name="rcDesc">
		<xs:attribute name="l" type="distanceType" use="required" />
		<xs:attribute name="t" type="distanceType" use="required" />
		<xs:attribute name="r" type="distanceType" use="required" />
		<xs:attribute name="b" type="distanceType" use="required" />
	</xs:attributeGroup>
	<!-- The four distance to the four direction what means the distance the object and the text around it -->
	<xs:attributeGroup name="distanceFromTextDesc">
		<xs:attribute name="leftDistance" type="distanceType" use="optional" />
		<xs:attribute name="topDistance" type="distanceType" use="optional" />
		<xs:attribute name="rightDistance" type="distanceType" use="optional" />
		<xs:attribute name="bottomDistance" type="distanceType" use="optional" />
	</xs:attributeGroup>
	<!-- The four distance between the cell border and the text inside the cell -->
	<xs:attributeGroup name="innerMarginDesc">
		<xs:attribute name="marginLeft" type="distanceType" use="optional" />
		<xs:attribute name="marginTop" type="distanceType" use="optional" />
		<xs:attribute name="marginRight" type="distanceType" use="optional" />
		<xs:attribute name="marginBottom" type="distanceType" use="optional" />
	</xs:attributeGroup>
	<!-- common attributes of the paragraph like object as pic, table and paragraph -->
	<xs:attributeGroup name="paralikeDesc">
		<xs:attribute name="backColor" type="colorType" />
		<xs:attribute name="alignment" type="alignmentType" />
		<xs:attribute name="li" type="distanceType" />
		<xs:attribute name="ri" type="distanceType" />
		<xs:attribute name="spaceBefore" type="distanceType" />
		<xs:attribute name="spaceAfter" type="distanceType" />
	</xs:attributeGroup>
	<!-- paragraph description -->
	<xs:attributeGroup name="paraDesc">
	    <xs:attributeGroup ref="paralikeDesc" />
		<xs:attribute name="fli" type="distanceType" />
		<xs:attribute name="lsp" type="lspValueType" />
		<xs:attribute name="lspExact" type="distanceType" />
		<xs:attribute name="language" type="languageType" default="en" />
		<xs:attributeGroup ref="fontDesc" />
	</xs:attributeGroup>
	<!-- font description -->
	<xs:attributeGroup name="fontDesc">
		<xs:attribute name="bold" type="xs:boolean" default="false" />
		<xs:attribute name="italic" type="xs:boolean" default="false" />
		<xs:attribute name="underlined" type="underlinedType" />
		<xs:attribute name="strikethrough" type="xs:boolean" default="false" />
		<xs:attribute name="subsuperscript" type="subsuperscriptType" />
		<xs:attribute name="fontSize" type="xs:unsignedInt" default="10" />
		<xs:attribute name="fontFace" type="fontFaceType" />
		<xs:attribute name="fontFamily" type="fontFamilyType" />
		<xs:attribute name="fontPitch" type="fontPitchType" />
		<xs:attribute name="spacing" type="distanceType" />
		<xs:attribute name="scale" type="xs:int" />
		<xs:attribute name="foreColor" type="colorType" />
	</xs:attributeGroup>
	<!-- This describe that a non flowing object position fix or relative to a paragraph. -->
	<xs:attributeGroup name="anchorDesc">
		<xs:attribute name="anchorTo" type="anchorToType" />
		<xs:attribute name="refTo" type="xs:IDREF" />  <!-- This have to equal para/@id or table/@id or pic/@id -->
	</xs:attributeGroup>
	<!-- Describe the shadow of the object -->
	<xs:attributeGroup name="shadowDesc">
		<xs:attribute name="shadowWidth" type="distanceType" />
		<xs:attribute name="shadowWhere" type="cornerId" />
	</xs:attributeGroup>
	<!-- Describe the Background pattern -->
	<xs:attributeGroup name="patternDesc">
		<xs:attribute name="patternType" type="patternType" />
		<xs:attribute name="patternColor" type="cornerId" />
	</xs:attributeGroup>
	<!-- Describe the border corner -->
	<xs:attributeGroup name="roundCornerDesc">
		<xs:attribute name="topLeftCornerRadius" type="distanceType" default="0" />
		<xs:attribute name="topRightCornerRadius" type="distanceType" default="0" />
		<xs:attribute name="bottomLeftCornerRadius" type="distanceType" default="0" />
		<xs:attribute name="bottomRightCornerRadius" type="distanceType" default="0" />
	</xs:attributeGroup>
	<!-- Describe the appearance of the object. Background and border -->
	<xs:attributeGroup name="backgroundAppearanceDesc">
		<xs:attributeGroup ref="shadowDesc" />
		<xs:attributeGroup ref="patternDesc" />
		<xs:attributeGroup ref="roundCornerDesc" />
		<xs:attribute name="backColor" type="colorType" />
	</xs:attributeGroup>
	<!-- Describe the input form field. It contains the name of field. This need for database connection.
	       and describe the tab order. -->
	<xs:attributeGroup name="inputFormFieldDesc">
		<xs:attribute name="inputDataName" type="xs:string" />
		<xs:attribute name="formId" type="xs:ID" />
		<xs:attribute name="nextTab" type="xs:IDREF" />
		<xs:attribute name="prevTab" type="xs:IDREF" />
	</xs:attributeGroup>
	<!-- Describe the border of object -->
    <xs:group name="borderGroup">
        <xs:sequence>
		    <xs:element name="leftBorder" type="lineType" minOccurs="0" />
		    <xs:element name="topBorder" type="lineType" minOccurs="0" />
		    <xs:element name="rightBorder" type="lineType" minOccurs="0" />
		    <xs:element name="bottomBorder" type="lineType" minOccurs="0" />
		</xs:sequence>
    </xs:group>
	<!-- The nodes for describe the attributes of paragraph. Tab positons bullets and dropcap -->
	<xs:group name="paraAttribGroup">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:element name="dropCap" type="dropCapType" minOccurs="0" maxOccurs="1" />
			<xs:element name="bullet" type="bulletType" minOccurs="0" maxOccurs="1" />
			<xs:element name="tabs" type="tabType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:group>
	<!--										-->
	<!--				Complex Types           -->
	<!--										-->
	<!-- This type can describe the attributes of a single line. It can be a piece of border or a ruleLine  -->
	<xs:complexType name="lineType">
		<xs:attributeGroup ref="lineDesc" />
	</xs:complexType>
	<!-- rectangle the positions are in twips -->
	<xs:complexType name="rcType">
		<xs:attributeGroup ref="rcDesc" />
	</xs:complexType>
	<!-- The shape of the irregular object. The position are in twips. -->
	<!--   It describe a pizzabox. It means there are any rectangle each bottom of rectangle 
	       have to equal with the top of the next rectangle and each rectangle 
	       have to overlap the next rectangle horizontaly -->
	<xs:complexType name="shapeType">
		<xs:sequence>
			<xs:element name="rect" type="rcType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- This describe the dorpCap properth of a paragraph. 
	       It doesn't contains any text but say the number of character in the dropCap, 
	       the size of dropCap in line and where is the DropCap. -->
	<xs:complexType name="dropCapType">
		<xs:attribute name="type">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="inMargin" />
					<xs:enumeration value="dropped" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="numChars" type="xs:int" default="1" />
		<xs:attribute name="numLines" type="xs:int" />
	</xs:complexType>
	<!-- This describe the bullet and numbering properties of a paragraph. 
	       It doesn'n contain any text but contains the number of character in the bullet. -->
	<xs:complexType name="bulletType" mixed="true">
		<xs:attribute name="type" type="bulletTypeType" />
		<xs:attribute name="value" type="bulletValueType" />
		<xs:attribute name="numChars" type="xs:positiveInteger" />
	</xs:complexType>
	<!-- This describe a tab appearance. It contains position alignement and leaderChar -->
	<xs:complexType name="tabType">
		<xs:attribute name="alignment" type="alignmentType" />
		<xs:attribute name="position" type="distanceType" />
		<xs:attribute name="leaderChar" type="characterType" />
	</xs:complexType>
	<!-- This describe the layout of a table -->
	<!--  A table consist of a gridTable and cells. 
	        The gridTable describe the number of row, the number of column and the sizes of these.
	      A cell can cover more than one row and/or column -->
	<xs:complexType name="gridTableType">
		<xs:sequence>
			<xs:element name="gridCol" type="xs:int" minOccurs="1" maxOccurs="unbounded" />
			<xs:element name="gridRow" type="xs:int" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!--										-->
	<!--										-->
	<!-- Here are the page description objects: -->
	<!--									    -->
	<!-- It describe the image what was recognized. 
	       These need for the connection between the position of the object and the original image. -->
	<xs:complexType name="sourceType">
		<xs:attribute name="file" type="xs:string" />  <!-- The path of the original image -->
		<xs:attribute name="dpix" type="xs:int" />  <!-- The horizontal dpi of the original image -->
		<xs:attribute name="dpiy" type="xs:int" />  <!-- The vertical dpi of the original image -->
		<xs:attribute name="sizex" type="distanceType" />  <!-- The original width of the image in twips -->
		<xs:attribute name="sizey" type="distanceType" />  <!-- The original height of the image in twips-->
		<xs:attribute name="orientation" type="orientationType" default="0" />  <!-- The rotation of the original imaga. -->
		<xs:attribute name="skew" type="xs:int" default="0" />  <!-- The slant of the original image.  -->
	</xs:complexType>
	<!-- Describing the ideal page.				-->
	<!-- With the offsets you can write the     -->
	<!-- difference between the real and the	-->
	<!-- theoratical one.						-->
	<xs:complexType name="theoreticalPageType">
		<xs:attribute name="size" type="pageSizeType" use="required" />
		<xs:attribute name="marginLeft" type="distanceType" use="required" />
		<xs:attribute name="marginTop" type="distanceType" use="required" />
		<xs:attribute name="marginRight" type="distanceType" use="required" />
		<xs:attribute name="marginBottom" type="distanceType" use="required" />
		<xs:attribute name="offsetX" type="distanceType" use="optional" />
		<xs:attribute name="offsetY" type="distanceType" use="optional" />
		<xs:attribute name="width" type="distanceType" use="optional" />
		<xs:attribute name="height" type="distanceType" use="optional" />
	</xs:complexType>
	<!-- This contains some informational data. Title, author, ... -->
	<xs:complexType name="summaryType">
		<xs:sequence>
			<xs:element name="comment" type="xs:string" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="title" type="xs:string" use="optional" />
		<xs:attribute name="subject" type="xs:string" use="optional" />
		<xs:attribute name="author" type="xs:string" use="optional" />
		<xs:attribute name="company" type="xs:string" use="optional" />
	</xs:complexType>
	<!-- Describe the page attribute and the original image of page -->
	<xs:complexType name="pageDescType">
		<xs:sequence>
			<xs:element name="source" type="sourceType" />
			<xs:element name="theoreticalPage" type="theoreticalPageType" minOccurs="0" />
    		<xs:element name="language" type="languageType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="backColor" type="colorType" default="defaultForeground" />
		<xs:attribute name="textDirection" type="textDirectionType" default="left2right" />
	</xs:complexType>
	<!-- This contains styles what can contain paragraph and font attributes -->
	<xs:complexType name="styleTableType">
		<xs:sequence>
			<xs:element name="style" type="styleType" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- This describe a style. It contains paragaph and font attributes -->
	<xs:complexType name="styleType">
        <xs:group ref="paraAttribGroup" />
		<xs:attribute name="styleID" type="xs:ID" use="required" />
		<xs:attributeGroup ref="paraDesc" />
	</xs:complexType>
	<!--										-->
	<!--										-->
	<!-- Here is the main tree of the objects:	-->
	<!--										-->
	<!-- This is a line with attribute and anchor -->
	<xs:complexType name="rulerType">
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="lineDesc" />
		<xs:attributeGroup ref="anchorDesc" />
	</xs:complexType>
	<!-- charactertype -->
	<!-- mixed as it contains char data -->
	<!-- rcDesc is mandatory, but is ignored within <alt> as the chars inside -->
	<!-- inherit their (common) boundingbox info from <alt>. -->
	<!-- NOTE: a charType _can_ contain more than one letter. it should be thought of -->
	<!-- as a unit with a bounding box -->
	<xs:complexType name="charType" mixed="true">
		<xs:attribute name="optionalHyphen" type="xs:boolean" default="0" />
		<xs:attributeGroup ref="rcDesc" />
	</xs:complexType>
	<!-- a sequence of alternative characters -->
	<xs:complexType name="altType">
		<xs:sequence>
			<xs:element name="ch" type="charType" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
	</xs:complexType>
	<!-- It can be mark the new line. We don't use it after ln. -->
	<xs:complexType name="nlType">
		<xs:attribute name="orig" type="xs:boolean" default="true" />
		<xs:attribute name="force" type="xs:boolean" default="true" />
	</xs:complexType>
	<!-- We put it in place of tabulator -->
	<xs:complexType name="tabPositionType">
		<xs:attribute name="position" type="distanceType" />
		<xs:attribute name="leader" type="xs:int" />
	</xs:complexType>
	<!-- We put it in place of tabulator. We don't use it without width attribute after wd. -->
	<xs:complexType name="spaceType">
		<xs:attribute name="width" type="distanceType" />
	</xs:complexType>
	<!-- a sequence of characters sharing font, formatting, language or other(?) attributes -->
	<xs:complexType name="runType" mixed="true">
		<xs:sequence>
            <xs:group ref="borderGroup" />
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType"/>
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			    <xs:element name="link" type="linkType" />
			    <xs:element name="fieldCode" type="fieldCodeType" />
			    <xs:element name="formGroup" type="formGroupType" />
			    <xs:element name="inputLine" type="inputLineType" />
			    <xs:element name="checkBox" type="checkBoxType" />
			    <xs:element name="circleText" type="circleTextType" />
			    <xs:element name="fillGraphics" type="fillGraphicsType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="fontDesc" />
		<xs:attribute name="language" type="languageType" default="en" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	</xs:complexType>
	<!-- This could mark the words. We mark all word or don't mark any word in a page . -->
	<xs:complexType name="wordType" mixed="true">
		<xs:sequence>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="link" type="linkType" />
			    <xs:element name="fieldCode" type="fieldCodeType" />
			    <xs:element name="formGroup" type="formGroupType" />
			    <xs:element name="inputLine" type="inputLineType" />
			    <xs:element name="checkBox" type="checkBoxType" />
			    <xs:element name="circleText" type="circleTextType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="fontDesc" />
		<xs:attribute name="continuityType" />
	</xs:complexType>
	<!-- This mark the links. -->
	<xs:complexType name="linkType" mixed="true">
		<xs:sequence>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="href" type="xs:anyURI" use="required" />
	</xs:complexType>
	<!-- This mark the fieldCode. We can handle two different field code only. (pageNumber, numberOfPages)-->
	<xs:complexType name="fieldCodeType" mixed="true">
		<xs:sequence>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="type" type="fieldCodeTypeType" use="required" />
	</xs:complexType>
	<!-- This mark the complex input form field. -->
	<xs:complexType name="formGroupType" mixed="true">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
    	        <xs:element name="ln" type="lnType" />
			    <xs:element name="formGroup" type="formGroupType" />
			    <xs:element name="inputLine" type="inputLineType" />
			    <xs:element name="checkBox" type="checkBoxType" />
			    <xs:element name="circleText" type="circleTextType" />
			    <xs:element name="fillGraphics" type="fillGraphicsType" />
				<xs:element name="rulerline" type="rulerType"/>
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attribute name="type" type="formGroupTypeType" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	    <xs:attributeGroup ref="inputFormFieldDesc" />
	</xs:complexType>
	<!-- This mark the input line form field. The user can fill it with a string. -->
	<xs:complexType name="inputLineType" mixed="true">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="run" type="runType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="fontDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	    <xs:attributeGroup ref="inputFormFieldDesc" />
		<xs:attribute name="nextForm" type="xs:IDREF" />
	</xs:complexType>
	<!-- This is a checkBox input form field. -->
	<xs:complexType name="checkBoxType" mixed="true">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
	    </xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="fontDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	    <xs:attributeGroup ref="inputFormFieldDesc" />
		<xs:attribute name="nextForm" type="xs:IDREF" />
	</xs:complexType>
	<!-- This is a text what can the user mark with a circle -->
	<xs:complexType name="circleTextType" mixed="true">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="fontDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	    <xs:attributeGroup ref="inputFormFieldDesc" />
		<xs:attribute name="nextForm" type="xs:IDREF" />
	</xs:complexType>
	<!-- This is a area where the user have to draw or write something -->
	<xs:complexType name="fillGraphicsType" mixed="true">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
	    </xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	    <xs:attributeGroup ref="inputFormFieldDesc" />
	</xs:complexType>
	<!-- a physical text line may contain charTypes, runTypes and altTypes plus -->
	<!-- the text of the line itself -->
	<xs:complexType name="lnType" mixed="true">
		<xs:sequence>
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			    <xs:element name="link" type="linkType" />
			    <xs:element name="fieldCode" type="fieldCodeType" />
			    <xs:element name="formGroup" type="formGroupType" />
			    <xs:element name="inputLine" type="inputLineType" />
			    <xs:element name="checkBox" type="checkBoxType" />
			    <xs:element name="circleText" type="circleTextType" />
			    <xs:element name="fillGraphics" type="fillGraphicsType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attributeGroup ref="fontDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
		<xs:attribute name="continuityType" />
		<xs:attribute name="forcedEOF" type="xs:boolean" default="false" />
	</xs:complexType>
	<!-- This mark the paragraph -->
	<xs:complexType name="paraType" mixed="true">
		<xs:sequence>
		    <xs:group ref="paraAttribGroup" />
		    <xs:choice minOccurs="0" maxOccurs="unbounded">
			    <xs:element name="ln" type="lnType" />
			    <xs:element name="ch" type="charType" />
			    <xs:element name="alt" type="altType" />
			    <xs:element name="run" type="runType" />
			    <xs:element name="wd" type="wordType" />
			    <xs:element name="nl" type="nlType" />
			    <xs:element name="tab" type="tabPositionType" />
			    <xs:element name="space" type="spaceType" />
			    <xs:element name="link" type="linkType" />
			    <xs:element name="fieldCode" type="fieldCodeType" />
			    <xs:element name="formGroup" type="formGroupType" />
			    <xs:element name="inputLine" type="inputLineType" />
			    <xs:element name="checkBox" type="checkBoxType" />
			    <xs:element name="circleText" type="circleTextType" />
			    <xs:element name="fillGraphics" type="fillGraphicsType" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="paraDesc" />
		<xs:attribute name="id" type="xs:ID" />
		<xs:attribute name="styleRef" type="xs:IDREF" />
		<xs:attribute name="linkTo" type="xs:IDREF" />
		<xs:attributeGroup ref="rcDesc" />
	</xs:complexType>
	<!-- This is a picture. -->
	<xs:complexType name="picType">
		<!-- In rectangular case we only use the attributes (l, t, r, b) without child shapes, 
			while in irregular cases we use the shapes child elements to describe the shape, and 
			using the attributes (l, t, r, b) to describe the bounding box. -->
		<xs:sequence>
			<xs:element name="shape" type="shapeType" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attribute name="id" type="xs:ID" />
	    <xs:attributeGroup ref="paralikeDesc" />
		<xs:attribute name="file" type="xs:string" />
	</xs:complexType>
	<!-- This is a cell in the table. It can be cover more than one grid. -->
	<xs:complexType name="cellType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:choice maxOccurs="unbounded">
				<xs:element name="para" type="paraType" minOccurs="0" />
				<xs:element name="picture" type="picType" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="gridColFrom" type="xs:int" use="required" />
		<xs:attribute name="gridColTill" type="xs:int" use="required" />
		<xs:attribute name="gridRowFrom" type="xs:int" use="required" />
		<xs:attribute name="gridRowTill" type="xs:int" use="required" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
		<xs:attribute name="alignment" type="alignmentType" />
		<xs:attribute name="verticalAlignment" type="verticalAlignmentType" />
        <xs:attributeGroup ref="innerMarginDesc" />
	</xs:complexType>
	<!-- This describe a table object. -->
	<xs:complexType name="tableType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:element name="gridTable" type="gridTableType" minOccurs="1" maxOccurs="1" />
			<xs:element name="cell" type="cellType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attribute name="id" type="xs:ID" />
	    <xs:attributeGroup ref="paralikeDesc" />
	</xs:complexType>
	<!-- This hold togheter one or more paragraphlike (paragraph, picture, table) when these have the same border or background. -->
	<xs:complexType name="frameType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:choice maxOccurs="unbounded">
				<xs:element name="para" type="paraType" minOccurs="0" />
				<xs:element name="picture" type="picType" minOccurs="0" />
				<xs:element name="table" type="tableType" minOccurs="0" />
				<xs:element name="rulerline" type="rulerType" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
		<xs:attribute name="language" type="languageType" default="en" />
		<xs:attribute name="textDirection" type="textDirectionType" default="left2right" />
	</xs:complexType>
	<!-- This is a column of flowing text. -->
	<xs:complexType name="columnType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:element name="rightRulerLine" type="rulerType" minOccurs="0" maxOccurs="1" />
			<xs:choice maxOccurs="unbounded">
				<xs:element name="para" type="paraType" minOccurs="0" />
				<xs:element name="picture" type="picType" minOccurs="0" />
				<xs:element name="table" type="tableType" minOccurs="0" />
				<xs:element name="frame" type="frameType" minOccurs="0" />
				<xs:element name="rulerline" type="rulerType" minOccurs="0" />
				<xs:element name="dd" type="ddType" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
		<xs:attribute name="hasBreak" type="xs:boolean" default="false" />
	</xs:complexType>
	<!-- This is a part of document what contains flowing text (one or more columns) -->
	<xs:complexType name="sectionType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:element name="column" type="columnType" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
		<xs:attribute name="language" type="languageType" default="en" />
		<xs:attribute name="textDirection" type="textDirectionType" default="left2right" />
	</xs:complexType>
	<!-- This is a fix object what can press out the flowing text -->
	<xs:complexType name="ddType">
		<xs:sequence>
		    <!-- In rectangular case we only use the attributes (l, t, r, b) without child shapes, 
			    while in irregular cases we use the shapes child elements to describe the shape, and 
			    using the attributes (l, t, r, b) to describe the bounding box. -->
			<xs:element name="shape" type="shapeType" minOccurs="0" maxOccurs="1" />
            <xs:group  ref="borderGroup" />
			<xs:choice maxOccurs="unbounded">
				<xs:element name="para" type="paraType" minOccurs="0" />
				<xs:element name="picture" type="picType" minOccurs="0" />
				<xs:element name="table" type="tableType" minOccurs="0" />
				<xs:element name="frame" type="frameType" minOccurs="0" />
				<xs:element name="rulerline" type="rulerType" minOccurs="0" />
				<xs:element name="dd" type="ddType" minOccurs="0" />
				<xs:element name="section" type="sectionType" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
		<xs:attributeGroup ref="rcDesc" />
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
		<xs:attributeGroup ref="anchorDesc" />
		<xs:attributeGroup ref="distanceFromTextDesc" />
		<xs:attribute name="language" type="languageType" default="en" />
		<xs:attribute name="textDirection" type="textDirectionType" default="left2right" />
	</xs:complexType>
	<!-- This contains the footer or header -->
	<xs:complexType name="header_footerType">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<xs:element name="section" type="sectionType" />
				<xs:element name="dd" type="ddType" minOccurs="0" maxOccurs="unbounded" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- This is the main part of page -->
	<xs:complexType name="bodyType">
		<xs:sequence>
            <xs:group  ref="borderGroup" />
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="dd" type="ddType" />
				<xs:element name="section" type="sectionType" />
			</xs:choice>
		</xs:sequence>
	    <xs:attributeGroup ref="backgroundAppearanceDesc" />
	</xs:complexType>
	<!-- This describe the page -->
	<xs:complexType name="pageType">
		<xs:sequence>
			<xs:element name="description" type="pageDescType" minOccurs="1" />
			<xs:element name="styleTable" type="styleTableType" minOccurs="0" maxOccurs="1" />
			<xs:element name="header" type="header_footerType" minOccurs="0" maxOccurs="1" />
			<xs:element name="body" type="bodyType" minOccurs="1" maxOccurs="1" />
			<xs:element name="footer" type="header_footerType" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="ocr-vers" type="xs:string" />
	</xs:complexType>
	<!--										-->
	<!-- The 'docu' is the root object:			-->
	<!--										-->
	<xs:element name="document">
		<xs:complexType>
			<xs:sequence>
			    <xs:element name="summary" type="summaryType" minOccurs="0" maxOccurs="1" />
				<xs:element name="page" type="pageType" minOccurs="1" maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>